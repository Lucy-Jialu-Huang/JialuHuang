def generate_bracelet_length(starting_numbers):
    length_table = [[0 for _ in range(10)] for _ in range(10)]

    for i in range(10):
        for j in range(10):
            bead1, bead2 = i, j
            visited = set()
            length = 0

            while (bead1, bead2) not in visited:
                visited.add((bead1, bead2))
                bead3 = (bead1 + bead2) % 10
                bead1, bead2 = bead2, bead3
                length += 1

            length_table[i][j] = length

    return length_table

def print_table(table):
    print("    " + "    ".join(f"{i}" for i in range(10)))
    print("   +-----" * 10)

    for i, row in enumerate(table):
        print(f"{i}  |", end=" ")
        print(" | ".join(f"{cell}" for cell in row))
        print("   +-----" * 10)

starting_numbers = [i for i in range(10)]
length_table = generate_bracelet_length(starting_numbers)
print_table(length_table)

--------------------------------------------------------------------------------

def generate_bracelet_length(starting_numbers, modulo):
    length_table = [[0 for _ in range(modulo)] for _ in range(modulo)]

    for i in range(modulo):
        for j in range(modulo):
            bead1, bead2 = i, j
            visited = set()
            length = 0

            while (bead1, bead2) not in visited:
                visited.add((bead1, bead2))
                bead3 = (bead1 + bead2) % modulo
                bead1, bead2 = bead2, bead3
                length += 1

            length_table[i][j] = length

    return length_table

def print_table(table):
    print("    " + "    ".join(f"{i}" for i in range(len(table))))
    print("   +---" * len(table))

    for i, row in enumerate(table):
        print(f"{i}  |", end=" ")
        print(" | ".join(f"{cell}" for cell in row))
        print("   +---" * len(table))

modulo_value = 8

starting_numbers = [i for i in range(modulo_value)]
length_table = generate_bracelet_length(starting_numbers, modulo_value)
print_table(length_table)

--------------------------------------------------------------------------------

import matplotlib.pyplot as plt

def calculate_max_period(modulo):
    max_period = 0

    for i in range(modulo):
        for j in range(modulo):
            bead1, bead2 = i, j
            visited = set()
            length = 0

            while (bead1, bead2) not in visited:
                visited.add((bead1, bead2))
                bead3 = (bead1 + bead2) % modulo
                bead1, bead2 = bead2, bead3
                length += 1

            max_period = max(max_period, length)

    return max_period

def plot_modulo_vs_period(max_modulo):
    modulo_values = list(range(2, max_modulo + 1))
    max_periods = [calculate_max_period(modulo) for modulo in modulo_values]

    plt.plot(modulo_values, max_periods, marker='o')
    plt.title('Modulo vs Maximum Period Length')
    plt.xlabel('Modulo Value')
    plt.ylabel('Maximum Period Length')
    plt.grid(True)
    plt.show()

max_modulo_value = 100

plot_modulo_vs_period(max_modulo_value)
